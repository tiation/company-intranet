name: tiation-company-intranet-template - Enterprise CI/CD

on:
  push:
    branches: [ main, develop, 'release/**' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *' # Nightly security scans

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/tiation-company-intranet-template
  NODE_VERSION: '18'

jobs:
  security-scan:
    name: Security & Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-test:
    name: Build & Test (Static)
    runs-on: ubuntu-latest
    needs: [security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (for build tools)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install build dependencies
        run: |
          if [ -f "package.json" ]; then
            npm ci || npm install
          fi

      - name: Build static site
        run: |
          if [ -f "package.json" ] && npm run build --if-present; then
            echo "Built with npm"
          else
            echo "No build process required for static files"
          fi

      - name: Test HTML validation
        run: |
          if command -v html-validate &> /dev/null; then
            html-validate *.html || echo "HTML validation skipped"
          else
            echo "HTML validator not installed, skipping validation"
          fi

  docker-build:
    name: Build & Push Docker Image (Nginx)
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Nginx Dockerfile if not exists
        run: |
          if [ ! -f "Dockerfile" ]; then
            cat > Dockerfile << 'DOCKER_EOF'
          FROM nginx:alpine
          COPY . /usr/share/nginx/html
          COPY nginx.conf /etc/nginx/nginx.conf 2>/dev/null || echo "Using default nginx config"
          EXPOSE 80
          CMD ["nginx", "-g", "daemon off;"]
          DOCKER_EOF
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Deploy to docker.tiation.net
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: docker.tiation.net
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script: |
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            docker stop ${{ github.event.repository.name }}-staging || true
            docker rm ${{ github.event.repository.name }}-staging || true
            docker run -d \
              --name ${{ github.event.repository.name }}-staging \
              --restart unless-stopped \
              -p 0:80 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to docker.sxc.codes
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: docker.sxc.codes
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script: |
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            
            # Backup current container
            if docker ps | grep -q ${{ github.event.repository.name }}; then
              docker commit ${{ github.event.repository.name }} ${{ github.event.repository.name }}:backup-$(date +%Y%m%d-%H%M%S)
            fi
            
            # Deploy new version
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            docker stop ${{ github.event.repository.name }} || true
            docker rm ${{ github.event.repository.name }} || true
            docker run -d \
              --name ${{ github.event.repository.name }} \
              --restart unless-stopped \
              -p 0:80 \
              -e NODE_ENV=production \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Clean up old images
            docker image prune -f

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    steps:
      - name: Send notification
        run: |
          STATUS="${{ (needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success') && 'success' || 'failed' }}"
          if [ "$STATUS" = "success" ]; then
            MESSAGE="✅ ${{ github.event.repository.name }} deployed successfully!"
          else
            MESSAGE="❌ ${{ github.event.repository.name }} deployment failed!"
          fi
          
          # Send email notification
          curl -X POST https://api.mailgun.net/v3/mg.sxc.codes/messages \
            -u "api:${{ secrets.MAILGUN_API_KEY }}" \
            -F from="DevOps <devops@sxc.codes>" \
            -F to="tiatheone@protonmail.com,garrett@sxc.codes,garrett.dillman@gmail.com" \
            -F subject="${{ github.event.repository.name }} Deployment - $STATUS" \
            -F text="$MESSAGE" || true

          # Update Grafana
          curl -X POST "https://grafana.sxc.codes/api/annotations" \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "text": "'$MESSAGE'",
              "tags": ["deployment", "${{ github.event.repository.name }}"],
              "time": '$(date +%s000)'
            }' || true
